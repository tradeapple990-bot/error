//@version=6
// Created by digitaljobnews-hash & eatapple990-cmyk
// TBH Pure Supertrend Trailing Logic - Performance Table Fixed + Bias Confluence
// Current Date and Time (UTC): 2025-09-22 16:07:54
// Current User: tradeapple990-bot
indicator('Swing and TBH', overlay=true, max_bars_back=501, max_lines_count=400)


// ═════════════════════════════════════════════════════════════════
// NORMAL CANDLE DATA FOR PNL CALCULATION - FIXED WITH CORRECT METHOD
// ═════════════════════════════════════════════════════════════════

// Get the real ticker symbol (non-Heikin Ashi) using the correct method from reference indicator
base_ticker = ticker.new(syminfo.prefix, syminfo.ticker, session=session.regular)

// Fetch normal (real) OHLC data - matching reference indicator logic
normal_close = request.security(base_ticker, timeframe.period, close, lookahead=barmerge.lookahead_off)
normal_high = request.security(base_ticker, timeframe.period, high, lookahead=barmerge.lookahead_off) 
normal_low = request.security(base_ticker, timeframe.period, low, lookahead=barmerge.lookahead_off)
normal_open = request.security(base_ticker, timeframe.period, open, lookahead=barmerge.lookahead_off)

var bool tbh_in_trade = false
var string tbh_trade_type = na
var float tbh_entry_price = na
var float tbh_initial_sl = na  // Initial SL (Fixed/Candle based)
var float tbh_current_sl = na  // Current active SL (can switch to Supertrend)
var float tbh_take_profit = na  // Take profit level (only for Fixed TP mode)
var bool tbh_supertrend_activated = false  // Flag when Supertrend takes over
var int tbh_entry_bar_index = na
var float tbh_entry_candle_low = na
var float tbh_entry_candle_high = na
var bool tbh_using_fixed_tp = false  // Track which TP mode is active


// ═══════════════════════════════════════════════════════════════════════════════════
// STRATEGY ENABLE/DISABLE TOGGLES
// ═══════════════════════════════════════════════════════════════════════════════════

enable_tbh_strategy = input.bool(true, title="✅ Enable Top Bottom Hunter Strategy", group="Strategy Toggles")
enable_swing_strategy = input.bool(true, title="✅ Enable Swing (Heikin Ashi) Strategy", group="Strategy Toggles")


// TBH Bias Confluence Settings
enable_tbh_bias_confluence = input.bool(true, title="✅ Enable TBH Bias Confluence", tooltip="Requires BULL bias for TBH BUY signals and BEAR bias for TBH SELL signals", group="TBH Bias Settings")
enable_tbh_previous_bias_check = input.bool(false, title="✅ Enable TBH Previous Candle Bias Check", tooltip="Requires both current AND previous candle to have same bias for TBH signals", group="TBH Bias Settings")

// Swing Bias Confluence Settings
enable_swing_bias_confluence = input.bool(true, title="✅ Enable Swing Bias Confluence", tooltip="Requires BULL bias for Swing BUY signals and BEAR bias for Swing SELL signals", group="Swing Bias Settings")
enable_swing_previous_bias_check = input.bool(false, title="✅ Enable Swing Previous Candle Bias Check", tooltip="Requires both current AND previous candle to have same bias for Swing signals", group="Swing Bias Settings")

// ENHANCED OVERLAP FILTER
enable_overlap_filter = input.bool(true, title="✅ Enable Signal Overlap Filter", tooltip="Prevents multiple strategy signals when any strategy has active trade", group="Strategy Toggles")
enable_swing_override = input.bool(false, title="✅ Enable Swing Override by Other Strategies", tooltip="When enabled, other strategy signals will close active swing trades and take priority", group="Strategy Toggles")


// AUTO EXIT SETTINGS
enable_auto_exit = input.bool(true, title="✅ Enable Auto Exit", tooltip="Closes all active trades at specified time and blocks new entries after", group="Auto Exit Settings")
auto_exit_hour = input.int(15, title="Auto Exit Hour (24h format)", minval=9, maxval=23, group="Auto Exit Settings")
auto_exit_minute = input.int(15, title="Auto Exit Minute", minval=0, maxval=59, step=15, group="Auto Exit Settings")
block_entries_after_exit = input.bool(true, title="Block New Entries After Exit Time", group="Auto Exit Settings")



// SWING STRATEGY AUTO EXIT SETTINGS - SEPARATE FROM MAIN AUTO EXIT
swing_enable_auto_exit = input.bool(false, title="✅ Enable Swing Auto Exit", tooltip="Separate auto exit for swing strategy only", group="Swing Auto Exit Settings")
swing_auto_exit_hour = input.int(15, title="Swing Auto Exit Hour (24h format)", minval=9, maxval=23, group="Swing Auto Exit Settings")
swing_auto_exit_minute = input.int(15, title="Swing Auto Exit Minute", minval=0, maxval=59, step=15, group="Swing Auto Exit Settings")
swing_block_entries_after_exit = input.bool(true, title="Block Swing Entries After Exit Time", group="Swing Auto Exit Settings")

swing_start_time = input.string("09:15", title="Swing Strategy Start Time", options=["09:15", "09:30", "09:45", "10:00", "09:20", "10:30", "10:45", "11:00"], group="Strategy Start Times")



// ═════════════════════════════════════════════════════════════════
// TBH BIAS CONFLUENCE SETTINGS - SEPARATE PARAMETERS
// ═════════════════════════════════════════════════════════════════

tbh_bias_update_frequency = input.int(5, "TBH Bias Update Frequency (minutes)", minval=1, maxval=15, tooltip="Time between TBH bias analysis sessions", group="TBH Bias Settings")
tbh_bias_change_threshold = input.float(0.05, "TBH Bias Threshold %", minval=0.01, step=0.01, tooltip="Minimum % change to classify as gainer/loser for TBH", group="TBH Bias Settings")
tbh_bias_bull_threshold = input.float(8.0, "TBH BULL Bias Threshold", minval=1.0, maxval=50.0, step=0.5, tooltip="Spread above this value = BULL bias for TBH", group="TBH Bias Settings")
tbh_bias_bear_threshold = input.float(-8.0, "TBH BEAR Bias Threshold", maxval=-1.0, minval=-50.0, step=0.5, tooltip="Spread below this value = BEAR bias for TBH", group="TBH Bias Settings")

// ═════════════════════════════════════════════════════════════════
// SWING BIAS CONFLUENCE SETTINGS - SEPARATE PARAMETERS
// ═════════════════════════════════════════════════════════════════

swing_bias_update_frequency = input.int(5, "Swing Bias Update Frequency (minutes)", minval=1, maxval=15, tooltip="Time between Swing bias analysis sessions", group="Swing Bias Settings")
swing_bias_change_threshold = input.float(0.05, "Swing Bias Threshold %", minval=0.01, step=0.01, tooltip="Minimum % change to classify as gainer/loser for Swing", group="Swing Bias Settings")
swing_bias_bull_threshold = input.float(8.0, "Swing BULL Bias Threshold", minval=1.0, maxval=50.0, step=0.5, tooltip="Spread above this value = BULL bias for Swing", group="Swing Bias Settings")
swing_bias_bear_threshold = input.float(-8.0, "Swing BEAR Bias Threshold", maxval=-1.0, minval=-50.0, step=0.5, tooltip="Spread below this value = BEAR bias for Swing", group="Swing Bias Settings")


// ═════════════════════════════════════════════════════════════════
// NIFTY BIAS CONFLUENCE CALCULATION - DUAL CALCULATION (TBH + SWING)
// ═════════════════════════════════════════════════════════════════

// Top 16 Nifty stocks with OFFICIAL WEIGHTAGES (Total: ~66% coverage)
bias_top16_symbols = array.from("NSE:HDFCBANK", "NSE:ICICIBANK", "NSE:RELIANCE", "NSE:INFY", "NSE:BHARTIARTL", "NSE:LT", "NSE:ITC", "NSE:TCS", "NSE:SBIN", "NSE:AXISBANK", "NSE:KOTAKBANK", "NSE:M&M", "NSE:HCLTECH", "NSE:BAJFINANCE", "NSE:MARUTI", "NSE:ASIANPAINT")
bias_top16_weights = array.from(13.11, 9.00, 8.31, 4.78, 4.65, 3.82, 3.45, 2.85, 2.79, 2.70, 2.60, 2.55, 2.14, 2.13, 2.11, 1.97)

// ═════════════════════════════════════════════════════════════════
// TBH BIAS CALCULATION (SEPARATE)
// ═════════════════════════════════════════════════════════════════

// Request security data for TBH bias
tbh_bias_stock1_current = request.security("NSE:HDFCBANK", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock1_ref = request.security("NSE:HDFCBANK", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock2_current = request.security("NSE:ICICIBANK", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock2_ref = request.security("NSE:ICICIBANK", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock3_current = request.security("NSE:RELIANCE", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock3_ref = request.security("NSE:RELIANCE", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock4_current = request.security("NSE:INFY", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock4_ref = request.security("NSE:INFY", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock5_current = request.security("NSE:BHARTIARTL", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock5_ref = request.security("NSE:BHARTIARTL", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock6_current = request.security("NSE:LT", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock6_ref = request.security("NSE:LT", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock7_current = request.security("NSE:ITC", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock7_ref = request.security("NSE:ITC", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock8_current = request.security("NSE:TCS", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock8_ref = request.security("NSE:TCS", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock9_current = request.security("NSE:SBIN", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock9_ref = request.security("NSE:SBIN", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock10_current = request.security("NSE:AXISBANK", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock10_ref = request.security("NSE:AXISBANK", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock11_current = request.security("NSE:KOTAKBANK", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock11_ref = request.security("NSE:KOTAKBANK", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock12_current = request.security("NSE:HCLTECH", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock12_ref = request.security("NSE:HCLTECH", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock13_current = request.security("NSE:BAJFINANCE", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock13_ref = request.security("NSE:BAJFINANCE", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock14_current = request.security("NSE:MARUTI", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock14_ref = request.security("NSE:MARUTI", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock15_current = request.security("NSE:ASIANPAINT", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock15_ref = request.security("NSE:ASIANPAINT", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
tbh_bias_stock16_current = request.security("NSE:NESTLEIND", str.tostring(tbh_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
tbh_bias_stock16_ref = request.security("NSE:NESTLEIND", str.tostring(tbh_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)

// Arrays for TBH bias calculation
tbh_bias_current_prices = array.from(tbh_bias_stock1_current, tbh_bias_stock2_current, tbh_bias_stock3_current, tbh_bias_stock4_current, tbh_bias_stock5_current, tbh_bias_stock6_current, tbh_bias_stock7_current, tbh_bias_stock8_current, tbh_bias_stock9_current, tbh_bias_stock10_current, tbh_bias_stock11_current, tbh_bias_stock12_current, tbh_bias_stock13_current, tbh_bias_stock14_current, tbh_bias_stock15_current, tbh_bias_stock16_current)
tbh_bias_ref_prices = array.from(tbh_bias_stock1_ref, tbh_bias_stock2_ref, tbh_bias_stock3_ref, tbh_bias_stock4_ref, tbh_bias_stock5_ref, tbh_bias_stock6_ref, tbh_bias_stock7_ref, tbh_bias_stock8_ref, tbh_bias_stock9_ref, tbh_bias_stock10_ref, tbh_bias_stock11_ref, tbh_bias_stock12_ref, tbh_bias_stock13_ref, tbh_bias_stock14_ref, tbh_bias_stock15_ref, tbh_bias_stock16_ref)

// TBH Bias variables
var float tbh_bias_gainers_weight = 0.0
var float tbh_bias_losers_weight = 0.0
var float tbh_bias_spread = 0.0
var string tbh_current_nifty_bias = "SIDEWAYS"
var string tbh_previous_nifty_bias = "SIDEWAYS"

// Calculate TBH bias
if barstate.isconfirmed
    temp_gainers_weight = 0.0
    temp_losers_weight = 0.0
    
    for i = 0 to 15
        weight = array.get(bias_top16_weights, i)
        stock_current = array.get(tbh_bias_current_prices, i)
        stock_ref = array.get(tbh_bias_ref_prices, i)
        
        change_pct = stock_ref != 0 and not na(stock_ref) and not na(stock_current) ? 
                     ((stock_current - stock_ref) / stock_ref) * 100 : 0.0
        
        if change_pct > tbh_bias_change_threshold
            temp_gainers_weight += weight
        else if change_pct < -tbh_bias_change_threshold
            temp_losers_weight += weight
    
    tbh_bias_gainers_weight := temp_gainers_weight
    tbh_bias_losers_weight := temp_losers_weight
    tbh_bias_spread := tbh_bias_gainers_weight - tbh_bias_losers_weight
    tbh_previous_nifty_bias := tbh_current_nifty_bias[1]
    tbh_current_nifty_bias := tbh_bias_spread > tbh_bias_bull_threshold ? "BULL" : tbh_bias_spread < tbh_bias_bear_threshold ? "BEAR" : "SIDEWAYS"

// ═════════════════════════════════════════════════════════════════
// SWING BIAS CALCULATION (SEPARATE)
// ═════════════════════════════════════════════════════════════════

// Request security data for Swing bias
swing_bias_stock1_current = request.security("NSE:HDFCBANK", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock1_ref = request.security("NSE:HDFCBANK", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock2_current = request.security("NSE:ICICIBANK", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock2_ref = request.security("NSE:ICICIBANK", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock3_current = request.security("NSE:RELIANCE", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock3_ref = request.security("NSE:RELIANCE", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock4_current = request.security("NSE:INFY", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock4_ref = request.security("NSE:INFY", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock5_current = request.security("NSE:BHARTIARTL", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock5_ref = request.security("NSE:BHARTIARTL", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock6_current = request.security("NSE:LT", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock6_ref = request.security("NSE:LT", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock7_current = request.security("NSE:ITC", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock7_ref = request.security("NSE:ITC", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock8_current = request.security("NSE:TCS", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock8_ref = request.security("NSE:TCS", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock9_current = request.security("NSE:SBIN", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock9_ref = request.security("NSE:SBIN", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock10_current = request.security("NSE:AXISBANK", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock10_ref = request.security("NSE:AXISBANK", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock11_current = request.security("NSE:KOTAKBANK", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock11_ref = request.security("NSE:KOTAKBANK", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock12_current = request.security("NSE:HCLTECH", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock12_ref = request.security("NSE:HCLTECH", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock13_current = request.security("NSE:BAJFINANCE", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock13_ref = request.security("NSE:BAJFINANCE", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock14_current = request.security("NSE:MARUTI", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock14_ref = request.security("NSE:MARUTI", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock15_current = request.security("NSE:ASIANPAINT", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock15_ref = request.security("NSE:ASIANPAINT", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)
swing_bias_stock16_current = request.security("NSE:NESTLEIND", str.tostring(swing_bias_update_frequency), close[0], lookahead=barmerge.lookahead_off)
swing_bias_stock16_ref = request.security("NSE:NESTLEIND", str.tostring(swing_bias_update_frequency), close[1], lookahead=barmerge.lookahead_off)

// Arrays for Swing bias calculation
swing_bias_current_prices = array.from(swing_bias_stock1_current, swing_bias_stock2_current, swing_bias_stock3_current, swing_bias_stock4_current, swing_bias_stock5_current, swing_bias_stock6_current, swing_bias_stock7_current, swing_bias_stock8_current, swing_bias_stock9_current, swing_bias_stock10_current, swing_bias_stock11_current, swing_bias_stock12_current, swing_bias_stock13_current, swing_bias_stock14_current, swing_bias_stock15_current, swing_bias_stock16_current)
swing_bias_ref_prices = array.from(swing_bias_stock1_ref, swing_bias_stock2_ref, swing_bias_stock3_ref, swing_bias_stock4_ref, swing_bias_stock5_ref, swing_bias_stock6_ref, swing_bias_stock7_ref, swing_bias_stock8_ref, swing_bias_stock9_ref, swing_bias_stock10_ref, swing_bias_stock11_ref, swing_bias_stock12_ref, swing_bias_stock13_ref, swing_bias_stock14_ref, swing_bias_stock15_ref, swing_bias_stock16_ref)

// Swing Bias variables
var float swing_bias_gainers_weight = 0.0
var float swing_bias_losers_weight = 0.0
var float swing_bias_spread = 0.0
var string swing_current_nifty_bias = "SIDEWAYS"
var string swing_previous_nifty_bias = "SIDEWAYS"

// Calculate Swing bias
if barstate.isconfirmed
    temp_gainers_weight = 0.0
    temp_losers_weight = 0.0
    
    for i = 0 to 15
        weight = array.get(bias_top16_weights, i)
        stock_current = array.get(swing_bias_current_prices, i)
        stock_ref = array.get(swing_bias_ref_prices, i)
        
        change_pct = stock_ref != 0 and not na(stock_ref) and not na(stock_current) ? 
                     ((stock_current - stock_ref) / stock_ref) * 100 : 0.0
        
        if change_pct > swing_bias_change_threshold
            temp_gainers_weight += weight
        else if change_pct < -swing_bias_change_threshold
            temp_losers_weight += weight
    
    swing_bias_gainers_weight := temp_gainers_weight
    swing_bias_losers_weight := temp_losers_weight
    swing_bias_spread := swing_bias_gainers_weight - swing_bias_losers_weight
    swing_previous_nifty_bias := swing_current_nifty_bias[1]
    swing_current_nifty_bias := swing_bias_spread > swing_bias_bull_threshold ? "BULL" : swing_bias_spread < swing_bias_bear_threshold ? "BEAR" : "SIDEWAYS"


// ═════════════════════════════════════════════════════════════════
// SEPARATE BIAS CONFLUENCE FUNCTIONS FOR TBH AND SWING
// ═════════════════════════════════════════════════════════════════

// TBH Bias Confluence Functions
isTBHBiasAllowedForBuy() =>
    if not enable_tbh_bias_confluence
        true
    else if enable_tbh_previous_bias_check
        tbh_current_nifty_bias == "BULL" and tbh_previous_nifty_bias == "BULL"
    else
        tbh_current_nifty_bias == "BULL"

isTBHBiasAllowedForSell() =>
    if not enable_tbh_bias_confluence
        true
    else if enable_tbh_previous_bias_check
        tbh_current_nifty_bias == "BEAR" and tbh_previous_nifty_bias == "BEAR"
    else
        tbh_current_nifty_bias == "BEAR"

// Swing Bias Confluence Functions
isSwingBiasAllowedForBuy() =>
    if not enable_swing_bias_confluence
        true
    else if enable_swing_previous_bias_check
        swing_current_nifty_bias == "BULL" and swing_previous_nifty_bias == "BULL"
    else
        swing_current_nifty_bias == "BULL"

isSwingBiasAllowedForSell() =>
    if not enable_swing_bias_confluence
        true
    else if enable_swing_previous_bias_check
        swing_current_nifty_bias == "BEAR" and swing_previous_nifty_bias == "BEAR"
    else
        swing_current_nifty_bias == "BEAR"


// TBH Bias Info Functions
getTBHBiasSpreadInfo() => (tbh_bias_spread > 0 ? "+" + str.tostring(tbh_bias_spread, "#.##") : str.tostring(tbh_bias_spread, "#.##"))

getTBHBiasThresholdInfo() => "Bull>" + str.tostring(tbh_bias_bull_threshold, "#.#") + " | Bear<" + str.tostring(tbh_bias_bear_threshold, "#.#")

// Swing Bias Info Functions
getSwingBiasSpreadInfo() => (swing_bias_spread > 0 ? "+" + str.tostring(swing_bias_spread, "#.##") : str.tostring(swing_bias_spread, "#.##"))

getSwingBiasThresholdInfo() => "Bull>" + str.tostring(swing_bias_bull_threshold, "#.#") + " | Bear<" + str.tostring(swing_bias_bear_threshold, "#.#")




// ═══════════════════════════════════════════════════════════════════════════════════
// TOP BOTTOM HUNTER STRATEGY - PURE SUPERTREND TRAILING (NO FIXED TP)
// ═══════════════════════════════════════════════════════════════════════════════════

// Fibonacci Settings
tbh_fib_0 = input.float(0.382, "Fib Level 0", group="Top Bottom Hunter Strategy")
tbh_fib_1 = input.float(0.618, "Fib Level 1", group="Top Bottom Hunter Strategy")
tbh_swing_len = input.int(20, "Swing Lookback", minval=1, group="Top Bottom Hunter Strategy")

// RSI Settings
tbh_rsi_length = input.int(14, "RSI Length", group="Top Bottom Hunter Strategy")
tbh_rsi_overbought = input.int(70, "RSI Overbought Level", group="Top Bottom Hunter Strategy")
tbh_rsi_oversold = input.int(30, "RSI Oversold Level", group="Top Bottom Hunter Strategy")


// SUPERTREND SETTINGS FOR TBH - MATCHING REFERENCE SCRIPT
tbh_supertrend_atr_length = input.int(1, title="Supertrend ATR Length", minval=1, group="Top Bottom Hunter Strategy")
tbh_supertrend_multiplier = input.float(2.0, title="Supertrend Multiplier", minval=0.1, step=0.1, group="Top Bottom Hunter Strategy")

// INITIAL STOP LOSS SETTINGS (Before Supertrend Takes Over)
tbh_initial_sl_type = input.string("Fixed Points", title="Initial SL Type (Before Trail)", options=["Fixed Points", "Entry Candle Low"], group="Top Bottom Hunter Strategy", tooltip="Initial SL used until Supertrend crosses above this level")
tbh_fixed_sl_points = input.float(31.0, title="Fixed SL Points", group="Top Bottom Hunter Strategy")
tbh_entry_candle_buffer = input.float(5.0, title="Entry Candle SL Buffer (Points)", minval=-100, maxval=50.0, group="Top Bottom Hunter Strategy")

tbh_label_offset = input.float(1.0, title="Label Distance", minval=0.1, maxval=5.0, step=0.1, group="Top Bottom Hunter Strategy")


// TBH Candle Color Filter
tbh_use_candle_color = input.bool(true, title="✅ Enable Candle Color Filter", tooltip="BUY only on green candles, SELL only on red candles", group="Top Bottom Hunter Strategy")

// TBH Enhanced Entry Validation
tbh_use_enhanced_entry = input.bool(true, title="✅ Enable Enhanced Entry Validation", tooltip="Validates entry based on previous candle color and current close position", group="Top Bottom Hunter Strategy")

// TBH Enhanced Entry Buffer
tbh_enhanced_entry_buffer = input.float(2.0, title="Enhanced Entry Buffer Points", minval=0.0, maxval=20.0, step=0.5, tooltip="Minimum points required above/below reference level", group="Top Bottom Hunter Strategy")

// TBH TP MODE TOGGLE - NEW FEATURE
tbh_tp_mode = input.string("Pure Trailing", title="TBH TP Mode", options=["Fixed TP", "Pure Trailing"], group="Top Bottom Hunter Strategy", tooltip="Fixed TP: Uses fixed take profit points. Pure Trailing: Uses Supertrend trailing only")
tbh_fixed_tp_points = input.float(50.0, title="Fixed TP Points (when Fixed TP selected)", minval=10.0, maxval=200.0, group="Top Bottom Hunter Strategy")

// Display Settings
show_tbh_fibs = input.bool(false, title="Show Fibonacci Lines", group="Top Bottom Hunter Strategy")
show_tbh_supertrend = input.bool(true, title="Show Supertrend Lines", group="Top Bottom Hunter Strategy")
tbh_enable_alerts = input.bool(true, title="Enable TBH Alerts", group="Top Bottom Hunter Strategy")



// ═════════════════════════════════════════════════════════════════
// SWING (HEIKIN ASHI) STRATEGY INPUTS
// ═════════════════════════════════════════════════════════════════

// Original HAT Inputs
swing_res = input.timeframe(title="Swing Resolution", defval="", group="Swing Strategy")
swing_colorBars = input.bool(title="Color bars", defval=false, group="Swing Strategy")
swing_show_label_signals = input.bool(false, title="Show Label signals", group="Swing Strategy")
swing_percentSqueeze = input.float(0.2, step=0.1, title="Percent Squeeze", group="Swing Strategy")


// NEW: Toggle for Squeeze and Normal Signal Types
swing_show_lime_red_signals = input.bool(true, title="Show Buy/Sell on Lime/Red (Normal) Bars", group="Swing Strategy")

// Tilson T3 Inputs
swing_T3Factor = input.float(defval=0.3, minval=0, maxval=100, step=0.1, title="Swing T3 Factor", group="Swing Strategy")
swing_T3Length = input.int(defval=7, minval=1, title="Swing T3 Length", group="Swing Strategy")

// Strategy Options
swing_use_star_based_exit = input.bool(true, title="Use Star-Based Exit (vs Fixed SL/TP)", group="Swing Strategy")
swing_fixed_sl_points = input.float(20.0, title="Fixed SL Points (if not using star-based)", group="Swing Strategy")
swing_fixed_tp_points = input.float(40.0, title="Fixed TP Points (if not using star-based)", group="Swing Strategy")

swing_volume_ma_length = input.int(20, title="Volume MA Length", group="Swing Strategy")
swing_volume_multiplier = input.float(1.0,step=0.1, title="Volume Multiplier", group="Swing Strategy")


swing_enable_atr_trail_exit = input.bool(true, title="Enable ATR Trailing Stop Exit", group="Swing Strategy")
swing_atr_trail_period = input.int(5, title="ATR Trail Period", group="Swing Strategy")
swing_atr_trail_hhv = input.int(10, title="ATR Trail HHV Period", group="Swing Strategy")
swing_atr_trail_mult = input.float(2.5, step=0.1,title="ATR Trail Multiplier", group="Swing Strategy")

swing_enable_alerts = input.bool(true, title="Enable Swing Alerts", group="Swing Strategy")

// HTF SUPERTREND CONFLUENCE SETTINGS
swing_enable_htf_confluence = input.bool(false, title="✅ Enable HTF Supertrend Confluence", tooltip="Requires HTF supertrend alignment for swing signals", group="Swing Strategy")
swing_htf_mode = input.string("Auto", title="HTF Method", options=["Auto", "User Defined"], group="Swing Strategy")
swing_htf_custom = input.timeframe("5", title="Custom HTF (if User Defined selected)", group="Swing Strategy")
swing_htf_atr_period = input.int(7, title="HTF Supertrend ATR Period", minval=1, maxval=100, group="Swing Strategy")
swing_htf_atr_mult = input.float(2.0, title="HTF Supertrend ATR Multiplier", minval=0.5, maxval=100, step=0.1, group="Swing Strategy")

// ═══════════════════════════════════════════════════════════════════════════════════
// GLOBAL DISPLAY SETTINGS
// ═══════════════════════════════════════════════════════════════════════════════════

show_performance_table = input.bool(true, title="Show Combined Performance Table", group="Global Display Settings")
table_position = input.string("bottom_right", title="Table Position", options=["top_left", "top_center", "top_right", "middle_left", "middle_center", "middle_right", "bottom_left", "bottom_center", "bottom_right"], group="Global Display Settings")

// User Info - Updated
user_login = input.string("tradeapple990-bot", title="User Login", group="Global Display Settings")

// ═══════════════════════════════════════════════════════════════════════════════════
// UTILITY FUNCTIONS
// ═══════════════════════════════════════════════════════════════════════════════════

getCurrentTimestamp() =>
    year_str = str.tostring(year(time))
    month_str = str.tostring(month(time), "00")
    day_str = str.tostring(dayofmonth(time), "00")
    hour_str = str.tostring(hour(time), "00")
    minute_str = str.tostring(minute(time), "00")
    second_str = str.tostring(second(time), "00")
    year_str + "-" + month_str + "-" + day_str + " " + hour_str + ":" + minute_str + ":" + second_str

getTablePosition(pos) =>
    switch pos
        "top_left" => position.top_left
        "top_center" => position.top_center
        "top_right" => position.top_right
        "middle_left" => position.middle_left
        "middle_center" => position.middle_center
        "middle_right" => position.middle_right
        "bottom_left" => position.bottom_left
        "bottom_center" => position.bottom_center
        "bottom_right" => position.bottom_right
        => position.bottom_right

calculateWinRate(tpCount, slCount) =>
    totalTrades = tpCount + slCount
    totalTrades > 0 ? math.round((tpCount / totalTrades) * 100, 2) : 0.0

getMonthNameWithYear(monthNum, yearNum) =>
    month_name = switch monthNum
        1 => "January"
        2 => "February"
        3 => "March"
        4 => "April"
        5 => "May"
        6 => "June"
        7 => "July"
        8 => "August"
        9 => "September"
        10 => "October"
        11 => "November"
        12 => "December"
        => "Unknown"
    month_name + " " + str.tostring(yearNum)


// START TIME VALIDATION FUNCTIONS
parseStartTime(timeStr) =>
    switch timeStr
        "09:15" => [9, 15]
        "09:30" => [9, 30]
        "09:45" => [9, 45]
        "10:00" => [10, 0]
        "09:20" => [09, 20]
        "10:30" => [10, 30]
        "10:45" => [10, 45]
        "11:00" => [11, 0]
        => [9, 15]

isAfterStartTime(strategy_start_time) =>
    [start_hour, start_minute] = parseStartTime(strategy_start_time)
    current_hour = hour(time, 'GMT+5:30')
    current_minute = minute(time, 'GMT+5:30')
    
    current_hour > start_hour or (current_hour == start_hour and current_minute >= start_minute)


isSwingStartTimeValid() => isAfterStartTime(swing_start_time)



isAfterAutoExitTime() =>
    if not enable_auto_exit
        false
    else
        current_hour = hour(time, 'GMT+5:30')
        current_minute = minute(time, 'GMT+5:30')
        current_hour > auto_exit_hour or (current_hour == auto_exit_hour and current_minute >= auto_exit_minute)

// Block all entries after auto exit time (if enabled)
isEntryBlocked() =>
    if block_entries_after_exit
        isAfterAutoExitTime()
    else
        false

    // Backward compatibility function
isAfter315PM() =>
    isAfterAutoExitTime()




// Swing-specific auto exit functions
isAfterSwingAutoExitTime() =>
    if not swing_enable_auto_exit
        false
    else
        current_hour = hour(time, 'GMT+5:30')
        current_minute = minute(time, 'GMT+5:30')
        current_hour > swing_auto_exit_hour or (current_hour == swing_auto_exit_hour and current_minute >= swing_auto_exit_minute)

// Block swing entries after swing auto exit time (if enabled)
isSwingEntryBlocked() =>
    if swing_block_entries_after_exit
        isAfterSwingAutoExitTime()
    else
        false


// ═══════════════════════════════════════════════════════════════════════════════════
// TBH CANDLE COLOR FILTER FUNCTIONS
// ═══════════════════════════════════════════════════════════════════════════════════

// TBH Candle Color Validation
isTBHCandleColorValid(isBuySignal) =>
    if not tbh_use_candle_color
        true
    else
        if isBuySignal
            close > open  // Green candle for BUY
        else
            close < open  // Red candle for SELL

// TBH Enhanced Entry Validation with Buffer
isTBHEnhancedEntryValid(isBuySignal) =>
    if not tbh_use_enhanced_entry
        true
    else
        // Get previous candle info
        prev_was_green = close[1] > open[1]
        prev_was_red = close[1] < open[1]
        prev_close = close[1]
        prev_open = open[1]
        current_close = close
        buffer_points = tbh_enhanced_entry_buffer
        
        if isBuySignal
            // BUY conditions with buffer
            if prev_was_green
                // Previous green: current close should be at least 2 points above previous close
                current_close >= (prev_close + buffer_points)
            else if prev_was_red
                // Previous red: current close should be at least 2 points above previous open
                current_close >= (prev_open + buffer_points)
            else
                // Previous doji or equal: allow entry (no buffer requirement for doji)
                true
        else
            // SELL conditions with buffer
            if prev_was_green
                // Previous green: current close should be at least 2 points below previous open
                current_close <= (prev_open - buffer_points)
            else if prev_was_red
                // Previous red: current close should be at least 2 points below previous close
                current_close <= (prev_close - buffer_points)
            else
                // Previous doji or equal: allow entry (no buffer requirement for doji)
                true

// ═══════════════════════════════════════════════════════════════════════════════════
// FIXED PERFORMANCE TRACKING SYSTEM - CORRECTED DATA DISPLAY
// ═══════════════════════════════════════════════════════════════════════════════════

// Combined performance tracking arrays - FIXED INITIALIZATION
var array<int> combined_trade_months = array.new<int>()
var array<int> combined_trade_years = array.new<int>()
var array<bool> combined_trade_was_tp = array.new<bool>()
var array<float> combined_trade_points = array.new<float>()
var array<string> combined_trade_strategy = array.new<string>()

// Combined counters
var int combined_total_tp_count = 0
var int combined_total_sl_count = 0
var float combined_total_tp_points = 0.0
var float combined_total_sl_points = 0.0

// Individual strategy counters for display


var int tbh_tp_count = 0
var int tbh_sl_count = 0
var int swing_tp_count = 0
var int swing_sl_count = 0
var bool swing_auto_exit_alert = false
var float swing_exit_price = na
// Missing swing trade management variables
var bool swing_in_trade = false
var string swing_trade_type = ""
var float swing_entry_price = na
var int swing_entry_bar_index = na
var int swing_entry_bar = na
var int swing_star_count_since_entry = 0
var bool swing_tp_hit_alert = false
var bool swing_sl_hit_alert = false
var float swing_trade_points_tp = 0.0
var float swing_trade_points_sl = 0.0
var float swing_stop_loss = na
var float swing_take_profit = na




// SL Streak tracking
var int current_sl_streak = 0
var int max_sl_streak = 0
var float current_sl_streak_points = 0.0
var float max_sl_streak_points = 0.0

// ENHANCED OVERLAP FILTER TRACKING
var bool any_strategy_active = false


var bool tbh_signal_this_bar = false
var bool swing_signal_this_bar = false













// ═══════════════════════════════════════════════════════════════════════════════════
// TOP BOTTOM HUNTER WITH PURE SUPERTREND TRAILING - NO FIXED TP
// ═══════════════════════════════════════════════════════════════════════════════════

// Swing High/Low for Fib
tbh_swing_high = ta.highest(high, tbh_swing_len)
tbh_swing_low  = ta.lowest(low, tbh_swing_len)
tbh_fib_range  = tbh_swing_high - tbh_swing_low

tbh_fib_level_0 = tbh_swing_high - (tbh_fib_range * tbh_fib_0)
tbh_fib_level_1 = tbh_swing_high - (tbh_fib_range * tbh_fib_1)

// RSI
tbh_rsi_value = ta.rsi(close, tbh_rsi_length)



// ═══════════════════════════════════════════════════════════════════════════════════
// SUPERTREND CALCULATION - SMOOTH VERSION (MATCHING REFERENCE SCRIPT)
// ═══════════════════════════════════════════════════════════════════════════════════

// ATR and median price for Supertrend
tbh_atr_value = ta.atr(tbh_supertrend_atr_length)
tbh_hl2 = (high + low) / 2

// Calculate basic bands
tbh_basic_upperband = tbh_hl2 + (tbh_supertrend_multiplier * tbh_atr_value)
tbh_basic_lowerband = tbh_hl2 - (tbh_supertrend_multiplier * tbh_atr_value)

// SMOOTHING LOGIC - This is what makes it stable!
var float tbh_upperband = na
var float tbh_lowerband = na

// Upper band smoothing - only moves up, never down when in uptrend
tbh_upperband := tbh_basic_upperband < nz(tbh_upperband[1], tbh_basic_upperband) or close[1] > nz(tbh_upperband[1], tbh_basic_upperband) ? tbh_basic_upperband : nz(tbh_upperband[1], tbh_basic_upperband)

// Lower band smoothing - only moves down, never up when in downtrend  
tbh_lowerband := tbh_basic_lowerband > nz(tbh_lowerband[1], tbh_basic_lowerband) or close[1] < nz(tbh_lowerband[1], tbh_basic_lowerband) ? tbh_basic_lowerband : nz(tbh_lowerband[1], tbh_basic_lowerband)

// Supertrend calculation with smoothed bands
var float tbh_supertrend = na
var int tbh_direction = 1

// Direction logic
tbh_direction := close > nz(tbh_upperband[1], tbh_upperband) ? -1 : close < nz(tbh_lowerband[1], tbh_lowerband) ? 1 : nz(tbh_direction[1], 1)

// Supertrend value
tbh_supertrend := tbh_direction == -1 ? tbh_lowerband : tbh_upperband

// Supertrend crossover signals
tbh_buy_supertrend = ta.crossover(close, tbh_supertrend)
tbh_sell_supertrend = ta.crossunder(close, tbh_supertrend)

// ═════════════════════════════════════════════════════════════════
// SWING (HEIKIN ASHI) STRATEGY CALCULATIONS
// ═════════════════════════════════════════════════════════════════

swing_T3FactorCalc = swing_T3Factor * 0.10

// ═════════════════════════════════════════════════════════════════
// HTF SUPERTREND CALCULATION FOR SWING CONFLUENCE
// ═════════════════════════════════════════════════════════════════

// Auto HTF determination
swing_htf_auto = timeframe.period == '1' ? '5' : 
                 timeframe.period == '3' ? '15' : 
                 timeframe.period == '5' ? '6' : 
                 timeframe.period == '15' ? '60' : 
                 timeframe.period == '30' ? '120' : 
                 timeframe.period == '45' ? '120' : 
                 timeframe.period == '60' ? '240' : 
                 timeframe.period == '120' ? '240' : 
                 timeframe.period == '180' ? '240' : 
                 timeframe.period == '240' ? 'D' : 
                 timeframe.period == 'D' ? 'W' :
                 timeframe.period == 'W' ? '5W' : 'D'

swing_htf_selected = swing_htf_mode == "Auto" ? swing_htf_auto : swing_htf_custom

// HTF Heikin Ashi data (only when enabled)
swing_htf_ha_ticker = swing_enable_htf_confluence ? ticker.heikinashi(syminfo.tickerid) : syminfo.tickerid
swing_htf_high = swing_enable_htf_confluence ? request.security(swing_htf_ha_ticker, swing_htf_selected, high[1], lookahead=barmerge.lookahead_on) : high
swing_htf_low = swing_enable_htf_confluence ? request.security(swing_htf_ha_ticker, swing_htf_selected, low[1], lookahead=barmerge.lookahead_on) : low
swing_htf_close = swing_enable_htf_confluence ? request.security(swing_htf_ha_ticker, swing_htf_selected, close[1], lookahead=barmerge.lookahead_on) : close

// HTF ATR (only when enabled)
swing_htf_atr = swing_enable_htf_confluence ? request.security(swing_htf_ha_ticker, swing_htf_selected, ta.atr(swing_htf_atr_period)[1], lookahead=barmerge.lookahead_on) : ta.atr(swing_htf_atr_period)


// HTF Supertrend calculation
swing_htf_hl2 = (swing_htf_high + swing_htf_low) / 2
swing_htf_up = swing_htf_hl2 - (swing_htf_atr_mult * swing_htf_atr)
swing_htf_dn = swing_htf_hl2 + (swing_htf_atr_mult * swing_htf_atr)

var float swing_htf_tup = na
var float swing_htf_tdown = na
var int swing_htf_trend = 1

if swing_enable_htf_confluence
    swing_htf_tup := swing_htf_close[1] > nz(swing_htf_tup[1]) ? math.max(swing_htf_up, nz(swing_htf_tup[1])) : swing_htf_up
    swing_htf_tdown := swing_htf_close[1] < nz(swing_htf_tdown[1]) ? math.min(swing_htf_dn, nz(swing_htf_tdown[1])) : swing_htf_dn
    swing_htf_trend := swing_htf_close > nz(swing_htf_tdown[1]) ? 1 : swing_htf_close < nz(swing_htf_tup[1]) ? -1 : nz(swing_htf_trend[1], 1)
else
    swing_htf_trend := 1  // Default to bullish when disabled
swing_htf_supertrend = swing_htf_trend == 1 ? swing_htf_tup : swing_htf_tdown

// HTF Supertrend confluence functions
// HTF confluence validation (direct boolean expressions)
swing_htf_bullish = swing_htf_trend == 1
swing_htf_bearish = swing_htf_trend == -1
swing_htf_buy_confluence = not swing_enable_htf_confluence or (normal_close > swing_htf_supertrend and swing_htf_bullish)
swing_htf_sell_confluence = not swing_enable_htf_confluence or (normal_close < swing_htf_supertrend and swing_htf_bearish)

swing_gd(src, length, factor) => 
    ta.ema(src, length) * (1 + factor) - ta.ema(ta.ema(src, length), length) * factor

swing_t3(src, length, factor) => 
    swing_gd(swing_gd(swing_gd(src, length, factor), length, factor), length, factor)

swing_ha_t = ticker.heikinashi(syminfo.tickerid)
swing_ha_o = request.security(swing_ha_t, swing_res, open)
swing_ha_c = request.security(swing_ha_t, swing_res, close)
swing_ha_h = request.security(swing_ha_t, swing_res, high)
swing_ha_l = request.security(swing_ha_t, swing_res, low)

swing_o2 = swing_t3(swing_ha_o, swing_T3Length, swing_T3FactorCalc)
swing_c2 = swing_t3(swing_ha_c, swing_T3Length, swing_T3FactorCalc)
swing_h2 = swing_t3(swing_ha_h, swing_T3Length, swing_T3FactorCalc)
swing_l2 = swing_t3(swing_ha_l, swing_T3Length, swing_T3FactorCalc)




// ═════════════════════════════════════════════════════════════════
// SWING SIGNAL DETECTION AND ENTRY PROCESSING
// ═════════════════════════════════════════════════════════════════

// Define swing_signal_allowed
swing_signal_allowed = enable_swing_strategy and not swing_in_trade and not isSwingEntryBlocked() and isSwingStartTimeValid()

// Initialize swing signals
swing_buy_signal = false
swing_sell_signal = false






swing_percentHL = ((swing_o2 - swing_c2) / math.avg(swing_o2, swing_c2)) * 100

swing_high_squeeze = math.abs(swing_percentHL) < swing_percentSqueeze and swing_percentHL > 0
swing_low_squeeze = math.abs(swing_percentHL) < swing_percentSqueeze and swing_percentHL < 0

swing_crossPlot = swing_o2 < swing_c2 ? swing_l2 : swing_h2
swing_plotColor = swing_high_squeeze ? color.maroon : swing_low_squeeze ? color.teal : swing_o2 < swing_c2 ? color.lime : color.red

// Signal detection
swing_green_star = swing_o2 < swing_c2 and (swing_o2[1] >= swing_c2[1])
swing_red_star = swing_o2 > swing_c2 and (swing_o2[1] <= swing_c2[1])

swing_o2_cross_under_long = ta.crossunder(swing_o2, swing_c2)
swing_c2_cross_over_short = ta.crossover(swing_o2, swing_c2)

swing_is_green_candle = close > open
swing_is_red_candle = close < open

swing_vol_ma = ta.sma(volume, swing_volume_ma_length)
swing_vol_filter = volume > (swing_vol_ma * swing_volume_multiplier)



// All calculations and assignments first
swing_is_squeeze_bar = swing_high_squeeze or swing_low_squeeze
swing_is_normal_bar = not swing_is_squeeze_bar

// Missing swing trade management variables - ADD THESE


// Helper: What is the real bar color for this bar? 
swing_bar_is_lime = swing_plotColor == color.lime
swing_bar_is_red = swing_plotColor == color.red
var int swing_consecutive_color_count = 0
swing_bar_is_lime_or_red = swing_bar_is_lime or swing_bar_is_red

swing_consecutive_color_count := swing_bar_is_lime_or_red ? (swing_bar_is_lime_or_red[1] ? swing_consecutive_color_count[1] + 1 : 1) : 0


// Entry conditions check for Swing - matching standalone logic
swing_entry_allowed = enable_swing_strategy and not swing_in_trade and isSwingStartTimeValid()


swing_buy_signal_condition = (((swing_is_normal_bar and swing_o2 < swing_c2 and close > swing_crossPlot and swing_is_green_candle and swing_vol_filter) or (swing_is_squeeze_bar and swing_green_star)) and swing_entry_allowed and isSwingBiasAllowedForBuy() and swing_htf_buy_confluence)
swing_sell_signal_condition = (((swing_is_normal_bar and swing_o2 > swing_c2 and close < swing_crossPlot and swing_is_red_candle and swing_vol_filter) or (swing_is_squeeze_bar and swing_red_star)) and swing_entry_allowed and isSwingBiasAllowedForSell() and swing_htf_sell_confluence)


swing_hat_buy_signal = swing_buy_signal_condition and swing_entry_allowed 
swing_hat_sell_signal = swing_sell_signal_condition and swing_entry_allowed








// ═════════════════════════════════════════════════════════════════
// SWING STRATEGY INTEGRATION INTO OVERLAP FILTER
// ═════════════════════════════════════════════════════════════════

// Reset swing signal flag each bar
swing_signal_this_bar := false

// Apply bias confluence for swing strategy (using Swing-specific functions)
swing_bias_allowed_buy = isSwingBiasAllowedForBuy()
swing_bias_allowed_sell = isSwingBiasAllowedForSell()

// Check if swing signals should be blocked by overlap filter
swing_overlap_blocked = enable_overlap_filter and (tbh_in_trade)


// Final swing signals with all filters applied
swing_final_buy_signal = swing_hat_buy_signal and swing_bias_allowed_buy and not swing_overlap_blocked and not isEntryBlocked()
swing_final_sell_signal = swing_hat_sell_signal and swing_bias_allowed_sell and not swing_overlap_blocked and not isEntryBlocked()

// Update swing signal flag
if swing_final_buy_signal or swing_final_sell_signal
    swing_signal_this_bar := true

// Update any_strategy_active to include swing strategy
any_strategy_active :=tbh_in_trade or swing_in_trade

// Swing strategy trade entries with overlap filter
if swing_final_buy_signal and not swing_in_trade
    swing_in_trade := true
    swing_trade_type := "BUY"
    swing_entry_price := normal_close
    swing_entry_bar := bar_index
    swing_star_count_since_entry := 0
    
    // Calculate stop loss and take profit
    if swing_use_star_based_exit
        swing_stop_loss := na
        swing_take_profit := na
    else
        swing_stop_loss := swing_entry_price - swing_fixed_sl_points
        swing_take_profit := swing_entry_price + swing_fixed_tp_points
    
    // Alert
    if swing_enable_alerts
        alert("Swing BUY Signal - Entry: " + str.tostring(swing_entry_price, "#.##"), alert.freq_once_per_bar)

if swing_final_sell_signal and not swing_in_trade
    swing_in_trade := true
    swing_trade_type := "SELL"
    swing_entry_price := normal_close
    swing_entry_bar := bar_index
    swing_star_count_since_entry := 0
    
    // Calculate stop loss and take profit
    if swing_use_star_based_exit
        swing_stop_loss := na
        swing_take_profit := na
    else
        swing_stop_loss := swing_entry_price + swing_fixed_sl_points
        swing_take_profit := swing_entry_price - swing_fixed_tp_points
    
    // Alert
    if swing_enable_alerts
        alert("Swing SELL Signal - Entry: " + str.tostring(swing_entry_price, "#.##"), alert.freq_once_per_bar)

// ATR Trailing calculation matching Breakout strategy
swing_Prev = ta.highest(normal_high - swing_atr_trail_mult * ta.atr(swing_atr_trail_period), swing_atr_trail_hhv)
swing_cum_1 = ta.cum(1)
swing_highest_1 = ta.highest(normal_high - swing_atr_trail_mult * ta.atr(swing_atr_trail_period), swing_atr_trail_hhv)
swing_highest_2 = ta.highest(normal_high - swing_atr_trail_mult * ta.atr(swing_atr_trail_period), swing_atr_trail_hhv)
swing_iff_1 = normal_close > swing_highest_1 and normal_close > normal_close[1] ? swing_highest_2 : swing_Prev
swing_TS = swing_cum_1 < 16 ? normal_close : swing_iff_1
swing_iff_2 = normal_close < swing_TS ? color.red : color.black
swing_Color = normal_close > swing_TS ? color.green : swing_iff_2
swing_Buy_ATR = ta.crossover(normal_close, swing_TS)
swing_Sell_ATR = ta.crossunder(normal_close, swing_TS)

// Exit flags

var bool swing_star_exit_alert = false


// Star counting for star-based exit
if swing_in_trade
    if swing_trade_type == "BUY" and swing_red_star
        swing_star_count_since_entry += 1
    else if swing_trade_type == "SELL" and swing_green_star
        swing_star_count_since_entry += 1



// ATR Trailing Stop Exit Logic - FIXED: Proper profit/loss detection
if swing_in_trade and swing_enable_atr_trail_exit and barstate.isconfirmed
    if swing_trade_type == "BUY" and swing_Sell_ATR
        // Exit BUY on ATR trail crossunder
        swing_exit_price := normal_close
        raw_points = swing_exit_price - swing_entry_price
        
        if raw_points > 0
            // Profit exit
            swing_trade_points_tp := raw_points
            swing_tp_hit_alert := true
            swing_sl_hit_alert := false
        else
            // Loss exit
            swing_trade_points_sl := math.abs(raw_points)
            swing_sl_hit_alert := true
            swing_tp_hit_alert := false
        
        swing_in_trade := false
        swing_trade_type := ""
        
        if swing_enable_alerts
            exit_type = raw_points > 0 ? "TP" : "SL"
            points_str = raw_points > 0 ? ("+" + str.tostring(raw_points, "#.##")) : ("-" + str.tostring(math.abs(raw_points), "#.##"))
            alert("Swing BUY Exit (ATR Trail " + exit_type + ") - Exit: " + str.tostring(swing_exit_price, "#.##") + " | Points: " + points_str, alert.freq_once_per_bar)
    
    else if swing_trade_type == "SELL" and swing_Buy_ATR
        // Exit SELL on ATR trail crossover
        swing_exit_price := normal_close
        raw_points = swing_entry_price - swing_exit_price
        
        if raw_points > 0
            // Profit exit
            swing_trade_points_tp := raw_points
            swing_tp_hit_alert := true
            swing_sl_hit_alert := false
        else
            // Loss exit
            swing_trade_points_sl := math.abs(raw_points)
            swing_sl_hit_alert := true
            swing_tp_hit_alert := false
        
        swing_in_trade := false
        swing_trade_type := ""
        
        if swing_enable_alerts
            exit_type = raw_points > 0 ? "TP" : "SL"
            points_str = raw_points > 0 ? ("+" + str.tostring(raw_points, "#.##")) : ("-" + str.tostring(math.abs(raw_points), "#.##"))
            alert("Swing SELL Exit (ATR Trail " + exit_type + ") - Exit: " + str.tostring(swing_exit_price, "#.##") + " | Points: " + points_str, alert.freq_once_per_bar)


